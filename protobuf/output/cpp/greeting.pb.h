// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greeting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greeting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greeting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greeting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greeting_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greeting_2eproto;
class GreetingRequest;
class GreetingRequestDefaultTypeInternal;
extern GreetingRequestDefaultTypeInternal _GreetingRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GreetingRequest* Arena::CreateMaybeMessage<::GreetingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GreetingRequest_GreetingType : int {
  GreetingRequest_GreetingType_FRIENDLY = 0,
  GreetingRequest_GreetingType_FORMAL = 1,
  GreetingRequest_GreetingType_CASUAL = 2,
  GreetingRequest_GreetingType_HOSTILE = 3,
  GreetingRequest_GreetingType_GreetingRequest_GreetingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GreetingRequest_GreetingType_GreetingRequest_GreetingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GreetingRequest_GreetingType_IsValid(int value);
constexpr GreetingRequest_GreetingType GreetingRequest_GreetingType_GreetingType_MIN = GreetingRequest_GreetingType_FRIENDLY;
constexpr GreetingRequest_GreetingType GreetingRequest_GreetingType_GreetingType_MAX = GreetingRequest_GreetingType_HOSTILE;
constexpr int GreetingRequest_GreetingType_GreetingType_ARRAYSIZE = GreetingRequest_GreetingType_GreetingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GreetingRequest_GreetingType_descriptor();
template<typename T>
inline const std::string& GreetingRequest_GreetingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GreetingRequest_GreetingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GreetingRequest_GreetingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GreetingRequest_GreetingType_descriptor(), enum_t_value);
}
inline bool GreetingRequest_GreetingType_Parse(
    const std::string& name, GreetingRequest_GreetingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GreetingRequest_GreetingType>(
    GreetingRequest_GreetingType_descriptor(), name, value);
}
// ===================================================================

class GreetingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GreetingRequest) */ {
 public:
  GreetingRequest();
  virtual ~GreetingRequest();

  GreetingRequest(const GreetingRequest& from);
  GreetingRequest(GreetingRequest&& from) noexcept
    : GreetingRequest() {
    *this = ::std::move(from);
  }

  inline GreetingRequest& operator=(const GreetingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GreetingRequest& operator=(GreetingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GreetingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GreetingRequest* internal_default_instance() {
    return reinterpret_cast<const GreetingRequest*>(
               &_GreetingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GreetingRequest& a, GreetingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GreetingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GreetingRequest* New() const final {
    return CreateMaybeMessage<GreetingRequest>(nullptr);
  }

  GreetingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GreetingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GreetingRequest& from);
  void MergeFrom(const GreetingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GreetingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GreetingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_greeting_2eproto);
    return ::descriptor_table_greeting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GreetingRequest_GreetingType GreetingType;
  static constexpr GreetingType FRIENDLY =
    GreetingRequest_GreetingType_FRIENDLY;
  static constexpr GreetingType FORMAL =
    GreetingRequest_GreetingType_FORMAL;
  static constexpr GreetingType CASUAL =
    GreetingRequest_GreetingType_CASUAL;
  static constexpr GreetingType HOSTILE =
    GreetingRequest_GreetingType_HOSTILE;
  static inline bool GreetingType_IsValid(int value) {
    return GreetingRequest_GreetingType_IsValid(value);
  }
  static constexpr GreetingType GreetingType_MIN =
    GreetingRequest_GreetingType_GreetingType_MIN;
  static constexpr GreetingType GreetingType_MAX =
    GreetingRequest_GreetingType_GreetingType_MAX;
  static constexpr int GreetingType_ARRAYSIZE =
    GreetingRequest_GreetingType_GreetingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GreetingType_descriptor() {
    return GreetingRequest_GreetingType_descriptor();
  }
  template<typename T>
  static inline const std::string& GreetingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GreetingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GreetingType_Name.");
    return GreetingRequest_GreetingType_Name(enum_t_value);
  }
  static inline bool GreetingType_Parse(const std::string& name,
      GreetingType* value) {
    return GreetingRequest_GreetingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:GreetingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_greeting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GreetingRequest

// string name = 1;
inline void GreetingRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GreetingRequest::name() const {
  // @@protoc_insertion_point(field_get:GreetingRequest.name)
  return _internal_name();
}
inline void GreetingRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GreetingRequest.name)
}
inline std::string* GreetingRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GreetingRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GreetingRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void GreetingRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GreetingRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GreetingRequest.name)
}
inline void GreetingRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GreetingRequest.name)
}
inline void GreetingRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GreetingRequest.name)
}
inline std::string* GreetingRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GreetingRequest::release_name() {
  // @@protoc_insertion_point(field_release:GreetingRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GreetingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GreetingRequest.name)
}

// string language = 2;
inline void GreetingRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GreetingRequest::language() const {
  // @@protoc_insertion_point(field_get:GreetingRequest.language)
  return _internal_language();
}
inline void GreetingRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:GreetingRequest.language)
}
inline std::string* GreetingRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:GreetingRequest.language)
  return _internal_mutable_language();
}
inline const std::string& GreetingRequest::_internal_language() const {
  return language_.GetNoArena();
}
inline void GreetingRequest::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GreetingRequest::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GreetingRequest.language)
}
inline void GreetingRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GreetingRequest.language)
}
inline void GreetingRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GreetingRequest.language)
}
inline std::string* GreetingRequest::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GreetingRequest::release_language() {
  // @@protoc_insertion_point(field_release:GreetingRequest.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GreetingRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:GreetingRequest.language)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GreetingRequest_GreetingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GreetingRequest_GreetingType>() {
  return ::GreetingRequest_GreetingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greeting_2eproto
